# -*- coding: utf-8 -*-
"""crime_historical.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mNoXX4Fv6_LRG7XwPMZ4QxblZQ_RtfZ6
"""

import pandas as pd
from statsmodels.tsa.ar_model import AutoReg
import matplotlib.pyplot as plt
import ts

df = pd.read_csv("point72_2024/backend/utils/data/crime_data/nypd_arrests_data_filtered.csv")
manhattan_stops = pd.read_csv('point72_2024/backend/utils/data/manhattan_stops.csv')

df['ARREST_DATE'] = pd.to_datetime(df['ARREST_DATE'], format='%m/%d/%Y', errors='coerce')

df.head()

df_filtered = df[(df['ARREST_PRECINCT'] >= 1.0) & (df['ARREST_PRECINCT'] <= 34.0)]

df_filtered

df_filtered = df_filtered.dropna(subset=['ARREST_DATE'])
df_filtered = df_filtered[df_filtered['ARREST_DATE'].dt.year > 2020]
df_filtered = df_filtered.sort_values(by='ARREST_DATE')
df_filtered = df_filtered.reset_index(drop=True)

df_filtered

df_filtered["OFNS_DESC"].unique()

pivot_df.size

crime_class_mapping = {
    'CRIMINAL MISCHIEF': 'Class D Felony',
    'MISCELLANEOUS PENAL LAW': 'Class D Felony',
    'GRAND LARCENY OF MOTOR': 'Class E Felony',
    'BURGLARY': 'Class B Violent Felony',
    'ASSAULT 3 & RELATED OFFENSES': 'Class A Misdemeanor',
    'ROBBERY': 'Class D Non-violent Felony',
    'VEHICLE AND TRAFFIC LAWS': 'Class C Misdemeanor',
    'FELONY ASSAULT': 'Class B Felony',
    'FORGERY': 'Class C Non-violent Felony',
    'FOR OTHER AUTHORITIES': 'Unspecified',
    'CRIMINAL TRESPASS': 'Class B Misdemeanor',
    'DANGEROUS DRUGS': 'Class A Felony',
    'GRAND LARCENY': 'Class B Felony',
    'KIDNAPPING & RELATED OFFENSES': 'Class A Felony',
    'DANGEROUS WEAPONS': 'Class B Felony',
    'OFF. AGNST PUB ORD SENSBLTY &': 'Class A Misdemeanor',
    'PETIT LARCENY': 'Class A Misdemeanor',
    'INTOXICATED & IMPAIRED DRIVING': 'Class E Felony',
    'OFFENSES AGAINST PUBLIC ADMINI': 'Class A Misdemeanor',
    'OFFENSES INVOLVING FRAUD': 'Class E Felony',
    'NYS LAWS-UNCLASSIFIED FELONY': 'Class A Felony',
    'OTHER OFFENSES RELATED TO THEF': 'Class A Misdemeanor',
    'OTHER TRAFFIC INFRACTION': 'Class A Misdemeanor',
    'RAPE': 'Class B Felony',
    'SEX CRIMES': 'Class B Felony',
    'OFFENSES AGAINST THE PERSON': 'Class A Felony',
    'POSSESSION OF STOLEN PROPERTY': 'Class C Felony',
    'MURDER & NON-NEGL. MANSLAUGHTE': 'Class B Felony',
    'GAMBLING': 'Class E Felony',
    'BURGLAR\'S TOOLS': 'Class A Misdemeanor',
    'HARRASSMENT 2': 'Class A Misdemeanor',
    'ENDAN WELFARE INCOMP': 'Class E Felony',
    'ALCOHOLIC BEVERAGE CONTROL LAW': 'Class A Misdemeanor',
    'INTOXICATED/IMPAIRED DRIVING': 'Class C Felony',
    'FRAUDULENT ACCOSTING': 'Class A Misdemeanor',
    'UNAUTHORIZED USE OF A VEHICLE': 'Class A Misdemeanor',
    'OTHER STATE LAWS (NON PENAL LA': 'Class A Misdemeanor',
    'AGRICULTURE & MRKTS LAW-UNCLASSIFIED': 'Class C Misdemeanor',
    'FRAUDS': 'Class E Felony',
    'DISORDERLY CONDUCT': 'Class A Misdemeanor',
    'THEFT-FRAUD': 'Class D Felony',
    'THEFT OF SERVICES': 'Class A Misdemeanor',
    'PROSTITUTION & RELATED OFFENSES': 'Class B Misdemeanor',
    'OTHER STATE LAWS': 'Class C Misdemeanor',
    'CHILD ABANDONMENT/NON SUPPORT': 'Class E Felony',
    'ARSON': 'Class A Felony',
    'MOVING INFRACTIONS': 'Class D Felony',
    'OFFENSES RELATED TO CHILDREN': 'Class A Misdemeanor',
    'OFFENSES AGAINST PUBLIC SAFETY': 'Class A Misdemeanor',
    'KIDNAPPING': 'Class A Felony',
    'HOMICIDE_NEGLIGENT, UNCLASSIFIE': 'Class E Felony',
    'ESCAPE 3': 'Class C Misdemeanor',
    'ADMINISTRATIVE CODE': 'Class B Misdemeanor',
    'JOSTLING': 'Class A Misdemeanor',
    'ANTICIPATORY OFFENSES': 'Class A Misdemeanor',
    'FELONY SEX CRIMES': 'Class A Felony',
    'KIDNAPPING AND RELATED OFFENSE': 'Class A Felony',
    'HOMICIDE-NEGLIGENT-VEHICLE': 'Class E Felony',
    'CANNABIS RELATED OFFENSES': 'Class D Felony',
    'ADMINSITRATIVE CODES': 'Unspecified',
    'CRIMINAL MISCHIEF & RELATED OF': "Unspecified"
}

crime_weights = {
    'Class A Felony': 10,
    'Class B Violent Felony': 9,
    'Class B Felony': 8,
    'Class C Felony': 7,
    'Class D Felony': 6,
    'Class E Felony': 5,
    'Class A Misdemeanor': 3,
    'Class B Misdemeanor': 2,
    'Class C Misdemeanor': 1,
    'Unspecified': 0.5  # Assigning a nominal weight for unspecified categories
}

def calculate_safety_score(crime_counts, crime_class_mapping, crime_weights):
    """
    Calculates the safety score for a precinct based on crime counts and weights.

    Args:
        crime_counts (dict): Dictionary with crime types and their counts.
        crime_class_mapping (dict): Maps crime types to their classes.
        crime_weights (dict): Weights assigned to each crime class.

    Returns:
        float: The calculated safety score.
    """
    score = 0
    for crime, count in crime_counts.items():
        crime_class = crime_class_mapping.get(crime, 'Unspecified')
        weight = crime_weights.get(crime_class, 0.5)  # Use 0.5 for unspecified class
        score += count * weight
    return score

def normalize_scores(precinct_scores):
    max_score = max(precinct_scores.values())
    return {precinct: (score / max_score) * 10 for precinct, score in precinct_scores.items()}

df_filtered['Felony_Class'] = df_filtered['OFNS_DESC'].map(crime_class_mapping)

# Replace NaN with 'Unspecified' if some offenses are not covered in the mapping
df_filtered['Felony_Class'].fillna('Unspecified', inplace=True)

# Map the Felony_Class to weights
df_filtered['Crime_Weight'] = df_filtered['Felony_Class'].map(crime_weights)

# View the updated DataFrame
print(df_filtered[['ARREST_DATE', 'OFNS_DESC', 'Felony_Class', 'Crime_Weight']])

# Convert ARREST_DATE to datetime
df_filtered['ARREST_DATE'] = pd.to_datetime(df_filtered['ARREST_DATE'])

# Group by week, precinct, and crime type, counting occurrences
weekly_crimes_by_precinct = df.groupby([pd.Grouper(key='ARREST_DATE', freq='W'), 'ARREST_PRECINCT', 'OFNS_DESC']).size().unstack(fill_value=0)

def calculate_precinct_weekly_safety_scores(df, crime_class_mapping, crime_weights):
    """
    Calculates weekly safety scores for each precinct from the dataset.

    Args:
        df (DataFrame): The complete dataset containing arrest records.
        crime_class_mapping (dict): Maps crime types to their classes.
        crime_weights (dict): Weights assigned to each crime class.

    Returns:
        DataFrame: A DataFrame with columns for week, precinct, and calculated safety scores.
    """
    # Ensure ARREST_DATE is in datetime format
    df['ARREST_DATE'] = pd.to_datetime(df['ARREST_DATE'])

    # Group by week, precinct, and crime type, counting occurrences
    weekly_crimes_by_precinct = df.groupby([pd.Grouper(key='ARREST_DATE', freq='W'), 'ARREST_PRECINCT', 'OFNS_DESC']).size().unstack(fill_value=0)

    # List to store each week's safety scores
    scores = []

    # Iterate over each week and precinct in the grouped DataFrame
    for (week, precinct), crimes in weekly_crimes_by_precinct.iterrows():
        # Convert the row to a dictionary where keys are crime types and values are counts
        crime_counts = crimes.to_dict()
        # Calculate the safety score using the provided scoring function
        score = 0
        for crime, count in crime_counts.items():
            crime_class = crime_class_mapping.get(crime, 'Unspecified')
            weight = crime_weights.get(crime_class, 0.5)  # Use 0.5 for unspecified class
            score += count * weight

        # Append the result to the scores list
        scores.append({'Week': week, 'Precinct': precinct, 'Safety_Score': score})

    # Convert the list of scores to a DataFrame
    return pd.DataFrame(scores)

# Assuming df, crime_to_felony, and crime_weights are defined and available
# Example usage
weekly_precinct_safety_scores = calculate_precinct_weekly_safety_scores(df_filtered, crime_class_mapping, crime_weights)
print(weekly_precinct_safety_scores)

weekly_precinct_safety_scores[weekly_precinct_safety_scores['Precinct'] == 1.0]

import pandas as pd

def calculate_and_compare_safety_scores(df, crime_class_mapping, crime_weights):
    """
    Calculates weekly safety scores for each precinct, compares them against the three-year average.

    Args:
        df (DataFrame): The complete dataset containing arrest records.
        crime_class_mapping (dict): Maps crime types to their classes.
        crime_weights (dict): Weights assigned to each crime class.

    Returns:
        DataFrame: A DataFrame with columns for week, precinct, safety scores, and normalized scores against three-year average.
    """
    # Ensure ARREST_DATE is in datetime format
    df['ARREST_DATE'] = pd.to_datetime(df['ARREST_DATE'])

    # Group by week, precinct, and crime type, counting occurrences
    weekly_crimes_by_precinct = df.groupby([pd.Grouper(key='ARREST_DATE', freq='W'), 'ARREST_PRECINCT', 'OFNS_DESC']).size().unstack(fill_value=0)

    # List to store each week's safety scores
    scores = []

    # Iterate over each week and precinct in the grouped DataFrame
    for (week, precinct), crimes in weekly_crimes_by_precinct.iterrows():
        crime_counts = crimes.to_dict()
        score = 0
        for crime, count in crime_counts.items():
            crime_class = crime_class_mapping.get(crime, 'Unspecified')
            weight = crime_weights.get(crime_class, 0.5)  # Use 0.5 for unspecified class
            score += count * weight
        scores.append({'Week': week, 'Precinct': precinct, 'Safety_Score': score})

    # Convert the list of scores to a DataFrame
    scores_df = pd.DataFrame(scores)

    # Calculate the historical average scores for the past three years
    latest_date = scores_df['Week'].max()
    three_years_ago = latest_date - pd.DateOffset(years=3)
    historical_scores = scores_df[scores_df['Week'] >= three_years_ago]

    # Calculate average scores for each precinct over the past three years
    historical_avg_scores = historical_scores.groupby('Precinct')['Safety_Score'].mean().reset_index()
    historical_avg_scores.rename(columns={'Safety_Score': 'Historical_Avg_Score'}, inplace=True)

    # Merge the historical averages back into the weekly scores DataFrame
    scores_df = scores_df.merge(historical_avg_scores, on='Precinct', how='left')

    # Calculate normalized scores as current score / historical average score
    scores_df['Normalized_Score'] = scores_df['Safety_Score'] / scores_df['Historical_Avg_Score'] * 10  # Scale to 10 for easier interpretation

    # Ensure scores are within expected range
    scores_df['Normalized_Score'] = scores_df['Normalized_Score'].clip(lower=0)

    return scores_df

# Assuming df, crime_to_felony, and crime_weights are defined and available
# Example usage
weekly_precinct_safety_scores = calculate_and_compare_safety_scores(df_filtered, crime_class_mapping, crime_weights)
print(weekly_precinct_safety_scores)

weekly_precinct_safety_scores[weekly_precinct_safety_scores['Precinct'] == 1.0]